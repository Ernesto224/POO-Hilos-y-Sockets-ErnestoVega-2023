/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Domain.Flecha;
import Domain.JuegoSingleton;
import Utility.Disenio;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Timer;

/**
 *
 * @author Ernesto
 */
public class JPanelJuego extends javax.swing.JPanel implements ActionListener {

    private final JuegoSingleton juego;
    private final Timer tiempoDeAnimacion;
    private int tiempo;
    private BufferedImage imagenFondo;

    /**
     * Creates new form JPanelJuego
     */
    public JPanelJuego() {
        initComponents();
        this.setFocusable(true);
        this.requestFocus();
        this.tiempoDeAnimacion = new Timer(100, this);
        this.setPreferredSize(new Dimension(Disenio.WIDTH_JPANEL_JUEGO, Disenio.HEIGTH_JPANEL_JUEGO));
        this.juego = JuegoSingleton.getInstance();
        try {
            this.imagenFondo = ImageIO.read(getClass().getResource("/assets/fondoJuego.png"));
        } catch (IOException ex) {
            Logger.getLogger(Flecha.class.getName()).log(Level.SEVERE, null, ex);
        }//trata de cargar la imagen
    }

    @Override
    public void paintComponent(Graphics g) {
        g.drawImage(this.imagenFondo, 0, 0, this.getPreferredSize().width, this.getPreferredSize().height, null);
        this.juego.dibujarJuego(g);
        repaint();
    }//metodo de dibujado

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            this.juego.getJugadorCliente().getPersonaje().movimientoDerecha();
        }

        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            this.juego.getJugadorCliente().getPersonaje().movimientoIzquierda();
        }

        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            this.juego.getJugadorCliente().getPersonaje().movimientoArriba();
        }

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            this.juego.getJugadorCliente().getPersonaje().movimientoAbajo();
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased

        if (evt.getKeyCode() == KeyEvent.VK_D) {
            this.juego.getJugadorCliente().getPersonaje().dispararArco();
            this.tiempo = 0;
            this.tiempoDeAnimacion.start();
        }

        if (evt.getKeyCode() == KeyEvent.VK_A) {
            this.juego.getJugadorCliente().getPersonaje().usarEspada();
            this.tiempo = 0;
            this.tiempoDeAnimacion.start();
        }

    }//GEN-LAST:event_formKeyReleased

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource().equals(this.tiempoDeAnimacion)) {
            this.tiempo++;
            if (this.tiempo == 6) {
                //cunado se a cumplido con los ciclos del timer necesarios realiza las acciones siguientes
                this.tiempoDeAnimacion.stop();
                this.juego.getJugadorCliente().getPersonaje().ocultarArmas();
            }//un contador que verifica que mi ruleta se realise el tiempo necesario   
        }//validacion del timer
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
